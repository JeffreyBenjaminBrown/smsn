
// Load from version-controlled graph (caution!)
com.tinkerpop.tinkubator.idindex.IdIndexGraph g2 = new com.tinkerpop.tinkubator.idindex.IdIndexGraph(g); InputStream i = new FileInputStream(new File("/Volumes/encrypted/mob-data/tinkernotes/tinkernotes.xml")); GraphMLReader r = new GraphMLReader(g2); r.inputGraph(i); i.close();

// Put the graph in manual transaction mode
g.getTransactionMode()
((TransactionalGraph) g).setTransactionMode(TransactionalGraph.Mode.MANUAL);
g.getTransactionMode()

// Find orphaned vertices
List<Vertex> orphans = new LinkedList<Vertex>(); for (Vertex v : g.getVertices()) { if (!v.getInEdges().hasNext() && !v.getOutEdges().hasNext()) { orphans.add(v); }}; for (Vertex v : orphans) { System.out.println("" + v); }

// Delete orphaned vertices.
List<Vertex> orphans = new LinkedList<Vertex>(); for (Vertex v : g.getVertices()) { if (!v.getInEdges().hasNext() && !v.getOutEdges().hasNext()) { orphans.add(v); }}; for (Vertex v : orphans) { g.removeVertex(v); }

// Find corrupted links
Collection<Vertex> bad = new LinkedList<Vertex>(); for (Vertex v : g.getVertices()) {boolean a = v.getOutEdges("from").hasNext(); boolean b = v.getOutEdges("to").hasNext(); if ((b && !a) || (a && !b)) {System.out.println(v.toString());bad.add(v);}};

// Delete corrupted links
Collection<Vertex> bad = new LinkedList<Vertex>(); for (Vertex v : g.getVertices()) {boolean a = v.getOutEdges("from").hasNext(); boolean b = v.getOutEdges("to").hasNext(); if ((b && !a) || (a && !b)) {System.out.println(v.toString());bad.add(v);}}; for (Vertex v : bad) {g.removeVertex(v);}

// Update version-controlled graph
com.tinkerpop.tinkubator.idindex.IdIndexGraph g2 = new com.tinkerpop.tinkubator.idindex.IdIndexGraph(g); OutputStream out = new FileOutputStream(new File("/Volumes/encrypted/mob-data/tinkernotes/tinkernotes.xml")); GraphMLWriter w = new GraphMLWriter(g2); w.setNormalize(true); w.outputGraph(out); out.close();



// One-time switchover from "text" to "value" properties
for (Vertex v : g.V) { System.out.println(v.getProperty("text")); }
for (Vertex v : g.V) { if (null != v.getProperty("text")) v.setProperty("value", v.getProperty("text")); }
for (Vertex v : g.V) { System.out.println(v.getProperty("value")); }
for (Vertex v : g.V) { v.removeProperty("text"); }
for (Vertex v : g.V) { System.out.println(v.getProperty("text")); }

// One-time assignment of weight and sharability to all atoms
for (Vertex v : g.V) { v.setProperty("weight", (float) 0.5); }
for (Vertex v : g.V) { v.setProperty("sharability", (float) 0.5); }
for (Vertex v : g.V) { v.removeProperty("visibility"); }


ba  IDEA's XML formatter appears to have the bad habit of inserting line breaks into long lines of text (which currently causes TinkerNotes to break)

mvn install
cp target/tinkernotes-0.1-standalone.jar ~/projects/tinkerpop/rexster/target/rexster-0.7-SNAPSHOT-standalone/ext/

export REXSTER_HOME=/Users/josh/projects/tinkerpop/rexster
./rexster.sh -s -c config/myotherbrain-rexster.xml



http://localhost:8182/josh/myotherbrain/read-notes?root=0


wget "http://localhost:8182/tinkernotes/tinkernotes/view?root=00000&depth=3&minSharability=0&maxSharability=1&minWeight=0&maxWeight=1&inverse=false"
wget "http://localhost:8182/tinkernotes/tinkernotes/view?root=xu1gu&depth=3&minSharability=0&maxSharability=1&minWeight=0&maxWeight=1&inverse=false"


mkdir .elisp
cd .elisp/
wget -O json.el http://cvs.savannah.gnu.org/viewvc/*checkout*/emacs/lisp/json.el?root=emacs


