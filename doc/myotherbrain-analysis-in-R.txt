################################################################################
# MyOtherBrain network analysis
################################################################################

v <- read.table(file("/tmp/tinkernotes-vertices.txt"), header=TRUE, sep="\t", quote="")

# Make sure you have all rows (compare with wc -l).
# R apparently skips rows when it becomes confused.
nrow(v)

mean(v$weight)
mean(v$sharability)

hist(v$weight)
hist(v$sharability)
plot(h$counts, log="xy")


################################################################################
# creation time

# TODO: dates on axes
hist(v$created, breaks=50)

times <- as.POSIXct(v$created/1000,  origin="1970-01-01", tz="GMT")

mod <- v$created %% (24*60*60*1000) / (60*60*1000)
hist(mod, breaks=24)


################################################################################
# value length

mean(nchar(as.character(v$value)))
h <- hist(nchar(as.character(v$value)), breaks=500, plot=FALSE)

# Find length-0 values (there shouldn't be any)
val0 <- subset(v, nchar(as.character(v$value)) == 0)

# Find length-1 values
val1 <- subset(v, nchar(as.character(v$value)) == 1)
data.frame(val1$id, val1$value)

# A view, not of value length distribution, but of absolute value length
# The implementation is stupid, but works well enough for the current small KB.
valx <- function(n) {
   nrow(subset(v, nchar(as.character(v$value)) == n))
}
counts <- mapply(valx, c(1:500))
# This is clearly a log-normal distribution
plot(counts, log="x")


################################################################################
# degree distribution

# Out-degree follows a power law, for the most part
plot(degree.distribution(g, mode="out"), log="xy")

# In-degree follows a distribution vaguely resembling a power-law after degree=1
plot(degree.distribution(g, mode="in"), log="xy", xlab="in-degree + 1", y="number of notes")

# Total degree is dominated by out-degree
plot(degree.distribution(g, mode="total"), log="xy")


################################################################################
# PageRank

library(igraph)

g <- read.graph(file("/tmp/tinkernotes-edges.txt"), format="ncol", directed = TRUE, weights = FALSE, names = TRUE)

ecount(g)
vcount(g)

# Just over 1 edge per vertex
ecount(g) / vcount(g)

V(g)
E(g)

# I now get an "Unknown ARPACK error"...
pg <- page.rank(g)

tmp <- data.frame(id=V(g)$name, pg$vector)
m <- merge(tmp, v, by="id")
ranked <- m[rev(order(m[, "pg.vector"])),]

# View PageRank results
ranked[1:50,]


################################################################################
# connected components

# Discover disconnected islands of brain
c <- clusters(g)

tmp <- data.frame(index=c(1:length(c$csize)), size=c$csize)
x <- subset(tmp, size == max(c$csize))
i <- x[1,1] - 1

tmp <- data.frame(id=V(g)$name, c$membership)
oddballs <- subset(tmp, c.membership != i)
x <- merge(oddballs, v, by="id")
paste(x$id, ": * ", x$value, sep="")
# vim /tmp/d
# cat /tmp/d | grep ":" | sed 's/\[[0-9]*\]..//' | sed 's/"[ ]*$//' | sed 's/\\"/"/' | sed 's/\\"/"/' | sed 's/\\"/"/' | sed 's/\\"/"/' | sed 's/\\"/"/' | sed 's/\\"/"/' | sed 's/\\"/"/' | sed 's/\\"/"/' | sed 's/\\"/"/' | sed 's/\\"/"/'

